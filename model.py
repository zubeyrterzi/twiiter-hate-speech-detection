# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14H2BoyjmTNhcMv1wRq8E28h_S4sTzJWo
"""


import torch
import torch.nn as nn
import numpy as np
from transformers import AutoTokenizer
from transformers import AutoConfig
import torch.nn.functional as F

model = 'bert-base-uncased'
model_config = 'bert-base-uncased'

config = AutoConfig.from_pretrained(model_config)
tokenizer = AutoTokenizer.from_pretrained(model)

def scaled_dot_product_attention(k, q, v):
  dim_k = k.size(-1)
  scores = torch.bmm(q, k.transpose(1,2) / np.sqrt(dim_k))
  weights = F.softmax(scores, dim= - 1)
  return torch.bmm(weights, v)

class SelfAttention(nn.Module):
  
  def __init__(self, embed_dim, head_dim):
    super(SelfAttention, self).__init__()
    self.k = nn.Linear(embed_dim, head_dim)
    self.q = nn.Linear(embed_dim, head_dim)
    self.v = nn.Linear(embed_dim, head_dim)

  def forward(self, hidden_state):

    attn_out = scaled_dot_product_attention(self.k(hidden_state), self.q(hidden_state), self.v(hidden_state))

    return attn_out

class MultiHeadAttention(nn.Module):
  
  def __init__(self, config):
    super(MultiHeadAttention, self).__init__()
    embed_dim = config.hidden_size
    num_heads = config.num_attention_heads
    head_dim = embed_dim // num_heads
    self.heads = nn.ModuleList(
        [SelfAttention(embed_dim, embed_dim)]
    )
    self.output_l = nn.Linear(embed_dim, embed_dim)
  def forward(self, hidden_state):
    concated_out = torch.cat([h(hidden_state) for h in self.heads], dim=1)
    concated_out = self.output_l(concated_out)
    return concated_out

class TransformerEncoderLayer(nn.Module):
  def __init__(self, config):
    super(TransformerEncoderLayer, self).__init__()
    self.layer_norm1 = nn.LayerNorm(config.hidden_size)
    self.layer_norm2 = nn.LayerNorm(config.hidden_size)
    self.attention = MultiHeadAttention(config)
    self.feed_forward = FeedForward(config)

  def forward(self, x):
    hidden_state = self.layer_norm1(x)
    x = x + self.attention(hidden_state)
    x = x + self.feed_forward(self.layer_norm2(x))
    return x

class FeedForward(nn.Module):
  
  def __init__(self, config):
    super(FeedForward, self).__init__()
    self.l1 = nn.Linear(config.hidden_size, config.intermediate_size)
    self.l2 = nn.Linear(config.intermediate_size, config.hidden_size)
    self.gelu = nn.ReLU()
    self.dropout = nn.Dropout(config.hidden_dropout_prob)
  
  def forward(self, x):
    x = self.l1(x)
    x = self.gelu(x)
    x = self.l2(x)
    x = self.dropout(x)
    return x

class Embedding(nn.Module):
  
  def __init__(self, config):
    super(Embedding, self).__init__()
    self.token_embeddings = nn.Embedding(config.vocab_size, config.hidden_size)
    self.position_embeddings = nn.Embedding(config.max_position_embeddings, config.hidden_size)
    self.layer_norm = nn.LayerNorm(config.hidden_size)
    self.dropout = nn.Dropout()
  
  def forward(self, input_ids):
    seq_length = input_ids.size(1)
    position_ids = torch.arange(seq_length, dtype = torch.long).unsqueeze(0)
    token_embeddings = self.token_embeddings(input_ids)
    position_embeddings = self.position_embeddings(position_ids)
    embeddings = token_embeddings + position_embeddings
    embeddings = self.layer_norm(embeddings)
    embeddings = self.dropout(embeddings)

    return embeddings

class TransformerEncode(nn.Module):

  def __init__(self, config):

    super(TransformerEncode, self).__init__()
    self.embeddings = Embedding(config)
    config.encoder = True
    self.layers = nn.ModuleList([TransformerEncoderLayer(config) for _ in range(config.num_hidden_layers)])

  def forward(self, x):
    
    x = self.embeddings(x)
    for layer in self.layers:
      x = layer(x)

    return x

class TransformerForSequenceClassification(nn.Module):
  def __init__(self, config):
    super(TransformerForSequenceClassification, self).__init__()
    self.encoder = TransformerEncode(config)
    self.dropout = nn.Dropout(config.hidden_dropout_prob)
    self.classifier = nn.Linear(config.hidden_size, config.num_labels)

  def forward(self, x):

    x = self.encoder(x)[:,0,:]
    x= self.dropout(x)
    x = self.classifier(x)

    return x